
/* Interface */
#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns(uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER() 

#define macro MAIN() = takes(0) returns(0) {
    // 0x00            // [0] (starting value of the stack)
    // calldataload    // [calldata], calls everything
    // // how do we cut down the calldata to just the function selector?
    // 0xe0            // TOP [0xe0, calldata (32)] BOTTOM
    // shr             // shifts calldata by 0xe0 amount (28 bytes or 224 bits) to get only function selector from calldata


    // updateHorseNumber selector
    // dup1                // [function_selector, function_selector]
    // 0xcdfead2e         // [oxcdfead2e, function_selector, function_selector]
    // eq                 // [true_if_func_selector_matches, function_selector]
    // // jump to updateHorseNumber code if true
    // updateJump         // [updateHorseNumberProgramCounter, true_if_func_selector_matches, function_selector]
    // jumpi              // [function_selector]

    // 0xe026c017         // [0xe026c017, function_selector]
    // eq                 // [true_if_func_selector_matches]
    // readJump           // [readJump, true_if_func_selector_matches]
    // jumpi              // []

    0x00 calldataload 0xe0 shr          // [function_selector]
    dup1 __FUNC_SIG(updateHorseNumber) eq updateJump jumpi // [function_selector]
    __FUNC_SIG(readNumberOfHorses) eq readJump jumpi        // []

    0x00 0x00 revert

    updateJump:
        SET_NUMBER_OF_HORSES()
    readJump: 
        GET_NUMBER_OF_HORSES()
}   

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 1. get value to store from calldata
    0x04                              // [4]
    calldataload                      // [value]
    // 2. give it a storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT]   // [storage_slot, value]
    // 3. sstore opcode
    sstore
    stop
}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    [NUMBER_OF_HORSES_STORAGE_SLOT]        // [key]
    sload                                  // [value]
    0x00                                   // [0, value]
    mstore                                 // []        // Memory: [value]
    // 0x20 == 32 bytes
    0x20 0x00 return                      // []
}